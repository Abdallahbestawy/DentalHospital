// <auto-generated />
using System;
using DentalHospital.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalHospital.Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DentalHospital.Domain.Models.Cashier", b =>
                {
                    b.Property<int>("cashierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cashierId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<int>("staffId")
                        .HasColumnType("int");

                    b.HasKey("cashierId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.ChronicDiseases", b =>
                {
                    b.Property<int>("chronicDiseasesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("chronicDiseasesId"), 1L, 1);

                    b.Property<string>("chronicDiseasesName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.HasKey("chronicDiseasesId");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Clinic", b =>
                {
                    b.Property<int>("clinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clinicId"), 1L, 1);

                    b.Property<string>("clinicName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("clinicId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.ClinicDepartment", b =>
                {
                    b.Property<int>("clinicDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clinicDepartmentId"), 1L, 1);

                    b.Property<string>("clinicDepartmentName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<int>("clinicId")
                        .HasColumnType("int");

                    b.HasKey("clinicDepartmentId");

                    b.HasIndex("clinicId");

                    b.ToTable("ClinicDepartments");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Diagnosis", b =>
                {
                    b.Property<int>("diagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("diagnosisId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clinicId")
                        .HasColumnType("int");

                    b.Property<int>("diagnosisStatus")
                        .HasColumnType("int");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<int>("interDoctorId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("diagnosisId");

                    b.HasIndex("clinicId");

                    b.HasIndex("doctorId");

                    b.HasIndex("interDoctorId");

                    b.HasIndex("patientId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Doctor", b =>
                {
                    b.Property<int>("doctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("doctorId"), 1L, 1);

                    b.Property<int>("clinicId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("doctorId");

                    b.HasIndex("clinicId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.InternDoctor", b =>
                {
                    b.Property<int>("internDoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("internDoctorId"), 1L, 1);

                    b.Property<string>("universityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("internDoctorId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("InternDoctor");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientId"), 1L, 1);

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("patientId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.PatientChronicDiseases", b =>
                {
                    b.Property<int>("patientChronicDiseasesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("patientChronicDiseasesId"), 1L, 1);

                    b.Property<int>("chronicDiseasesId")
                        .HasColumnType("int");

                    b.Property<int>("diagnosisId")
                        .HasColumnType("int");

                    b.HasKey("patientChronicDiseasesId");

                    b.HasIndex("chronicDiseasesId");

                    b.HasIndex("diagnosisId");

                    b.ToTable("PatientChronicDiseases");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Radiology", b =>
                {
                    b.Property<int>("radiologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("radiologyId"), 1L, 1);

                    b.Property<int>("diagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("radiologyStatus")
                        .HasColumnType("bit");

                    b.Property<double>("radiologyValue")
                        .HasColumnType("float");

                    b.Property<int>("staffId")
                        .HasColumnType("int");

                    b.Property<int>("typeRadiology")
                        .HasColumnType("int");

                    b.HasKey("radiologyId");

                    b.HasIndex("diagnosisId");

                    b.HasIndex("doctorId");

                    b.HasIndex("staffId");

                    b.ToTable("Radiologies");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Session", b =>
                {
                    b.Property<int>("sessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("sessionId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("diagnosisId")
                        .HasColumnType("int");

                    b.Property<int>("internDoctorId")
                        .HasColumnType("int");

                    b.HasKey("sessionId");

                    b.HasIndex("diagnosisId");

                    b.HasIndex("internDoctorId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Staff", b =>
                {
                    b.Property<int>("staffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("staffId"), 1L, 1);

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("staffId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Cashier", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Patient", "Patient")
                        .WithMany("Cashiers")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Staff", "Staff")
                        .WithMany("Cashier")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.ClinicDepartment", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Clinic", "Clinic")
                        .WithMany("ClinicDepartments")
                        .HasForeignKey("clinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Diagnosis", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Clinic", "Clinic")
                        .WithMany("Diagnoses")
                        .HasForeignKey("clinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Doctor", "Doctor")
                        .WithMany("Diagnoses")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.InternDoctor", "InternDoctor")
                        .WithMany("Diagnoses")
                        .HasForeignKey("interDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Patient", "Patient")
                        .WithMany("Diagnoses")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");

                    b.Navigation("InternDoctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Doctor", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("clinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("DentalHospital.Domain.Models.Doctor", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.InternDoctor", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.User", "User")
                        .WithOne("InternDoctor")
                        .HasForeignKey("DentalHospital.Domain.Models.InternDoctor", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Patient", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("DentalHospital.Domain.Models.Patient", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.PatientChronicDiseases", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.ChronicDiseases", "ChronicDiseases")
                        .WithMany()
                        .HasForeignKey("chronicDiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("PatientChronicDiseases")
                        .HasForeignKey("diagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Radiology", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("Radiologies")
                        .HasForeignKey("diagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Doctor", "Doctor")
                        .WithMany("Radiologies")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.Staff", "Staff")
                        .WithMany("Radiologies")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("Doctor");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Session", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.Diagnosis", "Diagnosis")
                        .WithMany("Sessions")
                        .HasForeignKey("diagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalHospital.Domain.Models.InternDoctor", "InternDoctor")
                        .WithMany("Sessions")
                        .HasForeignKey("internDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("InternDoctor");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Staff", b =>
                {
                    b.HasOne("DentalHospital.Domain.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("DentalHospital.Domain.Models.Staff", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Clinic", b =>
                {
                    b.Navigation("ClinicDepartments");

                    b.Navigation("Diagnoses");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Diagnosis", b =>
                {
                    b.Navigation("PatientChronicDiseases");

                    b.Navigation("Radiologies");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Doctor", b =>
                {
                    b.Navigation("Diagnoses");

                    b.Navigation("Radiologies");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.InternDoctor", b =>
                {
                    b.Navigation("Diagnoses");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Patient", b =>
                {
                    b.Navigation("Cashiers");

                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.Staff", b =>
                {
                    b.Navigation("Cashier");

                    b.Navigation("Radiologies");
                });

            modelBuilder.Entity("DentalHospital.Domain.Models.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("InternDoctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
